/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 Sofa.gltf 
*/

import React, { useEffect, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'
import { proxy, useSnapshot } from 'valtio';
import { Switch } from '@mui/material';

const state = proxy({ 
  current: null,
  items: {
    sofa: "#351919",
    cushion: "#FFFFFF",
    legs: "#FFFFFF"
  },
  enableCushion: true
});

export default function Model(props) {

  const { nodes, materials } = useGLTF('./model/Sofa/Sofa.gltf')
  const [ hover, setHover ] = useState(null);
  const snap = useSnapshot(state);
  const [refresh, setRefresh] = useState(false);

  const triggerRefresh = () => {
    setRefresh(prev => !prev)
  }

  useEffect(() => {
    triggerRefresh();
  }, [snap.enableCushion]);

  const handlePointerOver = (e) => {
    e.stopPropagation()
    setHover(e.object.material.name)
  }

  const handlePointerOut = (e) => {
    e.intersections.length === 0 && setHover(null)
  }

  const handlePointerDown = (e) => {
    e.stopPropagation();
    const current = e.object.material.name;
    if(current === "rød brown") {
      state.current = "sofa"
    } else if(current === "cusion yellow") {
      state.current = "cushion"
    } else if(current === "Legs metallic") {
      state.current = "legs"
    }
  }

  const handlePointerMissed = (e) => {
    state.current = null;
  }

  useFrame(() => {
    materials['rød brown'].color.set(state.items.sofa).multiplyScalar(20)
    materials['cusion yellow'].color.set(state.items.cushion).multiplyScalar(1); 
    materials['Legs metallic'].color.set(state.items.legs)
  })
;

  return (
    <group 
        {...props} 
        dispose={null}
        onPointerOver={handlePointerOver}
        onPointerOut={handlePointerOut}
        onPointerDown={handlePointerDown}
        onPointerMissed={handlePointerMissed}>
      <mesh 
        geometry={nodes.Legs.geometry} 
        material={materials['Legs metallic']} 
        position={[-0.01, 0.094, -0.312]} 
        rotation={[Math.PI, 0, Math.PI]} />
      
      {snap.enableCushion && (
        <>
          <mesh 
            geometry={nodes.Cusion002.geometry} 
            material={materials['cusion yellow']} 
            position={[-0.866, 0.611, -0.291]} 
            rotation={[2.531, -0.498, 1.21]} 
            scale={[0.39, 0.853, 0.698]} 
          />
          <mesh 
            geometry={nodes.Cusion001.geometry} 
            material={materials['cusion yellow']} 
            position={[-1.088, 0.622, -0.154]} 
            rotation={[1.897, -1.162, -2.842]} 
            scale={[0.388, 0.847, 0.675]} 
          />
          <mesh 
            geometry={nodes.Cusion.geometry} 
            material={materials['cusion yellow']} 
            position={[0.363, 0.608, -0.336]} 
            rotation={[2.728, -0.02, -1.485]} 
            scale={[0.386, 0.853, 0.614]} 
          />
        </>
      )}

      <mesh 
        geometry={nodes.Sofa.geometry} 
        material={materials['rød brown']} 
        position={[0.028, 0.224, -0.289]} 
        rotation={[0, -Math.PI / 2, 0]} 
        scale={[1, 1, 1.013]} />
    </group>
  )
}

export function Configurator() {
  
  const snap = useSnapshot(state);
  const sofaColors = [ '#351919', '#000000', '#003685' ];
  const cushionColors = [ '#f3ff00', '#5d5d5d' ];
  const legsColors = [ '#b2b2b2', '#000000', '#310000' ];
  const [selectedSofaColor, setSelectedSofaColor] = useState(sofaColors[0]);
  const [selectedCushionColor, setSelectedCushionColor] = useState(cushionColors[0]);
  const [selectedLegsColor, setSelectedLegsColor] = useState(legsColors[0]);
  const [checked, setChecked] = useState(true);

  const handleColorChange = (color) => {
    
    state.items[snap.current] = color;
    
    if(snap.current === 'sofa'){
      setSelectedSofaColor(color)
    } else if(snap.current === 'cushion'){
      setSelectedCushionColor(color)
    } else {
      setSelectedLegsColor(color);
    }
  }

  return (
    <div className={`configurator ${snap.current ? '': 'noneSelected'}`}>
      <Switch 
        checked={checked}
        onChange={() => {
          setChecked(!checked);
          if(checked){
            state.enableCushion = false;
          } else {
            state.enableCushion = true;
          }
        }}/>
      <h1 className='heading'>{snap.current}</h1>
      { snap.current === 'sofa' ? (
        <div className='color-picker'>
          {sofaColors.map((color) => (
            <button
              key={color}
              onClick={() => handleColorChange(color)}
              className={`color-button ${selectedSofaColor === color ? 'selected' : ''}`}
              style={{ backgroundColor: color }}
            />))}
        </div>
      ):(
        snap.current === 'cushion' ? (
          <div className='color-picker'>
            { cushionColors.map((color) => (
              <button
                key={color}
                onClick={() => handleColorChange(color)}
                className={`color-button ${selectedCushionColor === color ? 'selected' : ''}`}
                style={{backgroundColor: color}}/>))}
          </div>
        ):(
          <div className='color-picker'>
            { legsColors.map((color) => (
              <button
                key={color}
                onClick={() => handleColorChange(color)}
                className={`color-button ${selectedLegsColor === color ? 'selected' : ''}`}
                style={{backgroundColor: color}}/>))}
          </div>
        )
      ) }
      
    </div>
  )
}

useGLTF.preload('./model/Sofa/Sofa.gltf')
